{"ast":null,"code":"var _jsxFileName = \"/Users/sandeep/Downloads/github_repos/react-projs/the-atomic-blog/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { faker } from \"@faker-js/faker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createRandomPost() {\n  return {\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\n    body: faker.hacker.phrase()\n  };\n}\n\nfunction App() {\n  _s();\n\n  // Whenever `isFakeDark` changes, we toggle the `fake-dark-mode` class on the HTML element (see in \"Elements\" dev tool).\n  useEffect(function () {\n    document.documentElement.classList.toggle(\"fake-dark-mode\");\n  }, [isFakeDark]);\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    // Step2: Assigning Values to be passed\n    value: {\n      posts: searchedPosts,\n      onClearPosts: handleClearPosts,\n      onAddPost: handleAddPost,\n      searchQuery,\n      setSearchQuery\n    },\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsFakeDark(isFakeDark => !isFakeDark),\n        className: \"btn-fake-dark-mode\",\n        children: isFakeDark ? \"☀️\" : \"🌙\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Archive, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\n\nfunction Header() {\n  _s2();\n\n  // STEP3: CONSUMING CONTEXT VALUE\n  const {\n    onClearPosts\n  } = useContext(PostContext);\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u269B\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), \"The Atomic Blog\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Results, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchPosts, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClearPosts,\n        children: \"Clear posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Header, \"N86NTqNj/Ugj8SMFZ+2IUnyzUSA=\");\n\n_c2 = Header;\n\nfunction SearchPosts() {\n  _s3();\n\n  const {\n    searchQuery,\n    setSearchQuery\n  } = useContext(PostContext);\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: searchQuery,\n    onChange: e => setSearchQuery(e.target.value),\n    placeholder: \"Search posts...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(SearchPosts, \"BLpRAXPgpF7Y0m7TJaTpFRU0Gvo=\");\n\n_c3 = SearchPosts;\n\nfunction Results() {\n  _s4();\n\n  const {\n    posts\n  } = useContext(PostContext);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"\\uD83D\\uDE80 \", posts.length, \" atomic posts found\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this);\n}\n\n_s4(Results, \"HJzIqX8tD7UFv6WrvlK0x2fzJA4=\");\n\n_c4 = Results;\n\nfunction Main() {\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(FormAddPost, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Posts, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_c5 = Main;\n\nfunction Posts() {\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(List, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_c6 = Posts;\n\nfunction FormAddPost() {\n  _s5();\n\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n\n  const handleSubmit = function (e) {\n    e.preventDefault();\n    if (!body || !title) return;\n    onAddPost({\n      title,\n      body\n    });\n    setTitle(\"\");\n    setBody(\"\");\n  };\n\n  const {\n    onAddPost\n  } = useContext(PostContext);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: title,\n      onChange: e => setTitle(e.target.value),\n      placeholder: \"Post title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: body,\n      onChange: e => setBody(e.target.value),\n      placeholder: \"Post body\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s5(FormAddPost, \"1Cff/5lM35Z3FwMi23nXU2qKB9c=\");\n\n_c7 = FormAddPost;\n\nfunction List() {\n  _s6();\n\n  const {\n    posts\n  } = useContext(PostContext);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: posts.map((post, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_s6(List, \"HJzIqX8tD7UFv6WrvlK0x2fzJA4=\");\n\n_c8 = List;\n\nfunction Archive() {\n  _s7();\n\n  // Here we don't need the setter function. We're only using state to store these posts because the callback function passed into useState (which generates the posts) is only called once, on the initial render. So we use this trick as an optimization technique, because if we just used a regular variable, these posts would be re-created on every render. We could also move the posts outside the components, but I wanted to show you this trick 😉\n  const [posts] = useState(() => // 💥 WARNING: This might make your computer slow! Try a smaller `length` first\n  Array.from({\n    length: 10000\n  }, () => createRandomPost()));\n  const [showArchive, setShowArchive] = useState(false);\n  const {\n    onAddPost\n  } = useContext(PostContext);\n  return /*#__PURE__*/_jsxDEV(\"aside\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Post archive\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowArchive(s => !s),\n      children: showArchive ? \"Hide archive posts\" : \"Show archive posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), showArchive && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map((post, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [post.title, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this), \" \", post.body]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onAddPost(post),\n          children: \"Add as new post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}\n\n_s7(Archive, \"DfBeZpAX+Ga1qCE/uuxWysv7NEM=\");\n\n_c9 = Archive;\n\nfunction Footer() {\n  return /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA9 by The Atomic Blog \\u270C\\uFE0F\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 10\n  }, this);\n}\n\n_c10 = Footer;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"SearchPosts\");\n$RefreshReg$(_c4, \"Results\");\n$RefreshReg$(_c5, \"Main\");\n$RefreshReg$(_c6, \"Posts\");\n$RefreshReg$(_c7, \"FormAddPost\");\n$RefreshReg$(_c8, \"List\");\n$RefreshReg$(_c9, \"Archive\");\n$RefreshReg$(_c10, \"Footer\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","faker","createRandomPost","title","hacker","adjective","noun","body","phrase","App","document","documentElement","classList","toggle","isFakeDark","posts","searchedPosts","onClearPosts","handleClearPosts","onAddPost","handleAddPost","searchQuery","setSearchQuery","setIsFakeDark","Header","PostContext","SearchPosts","e","target","value","Results","length","Main","Posts","FormAddPost","setTitle","setBody","handleSubmit","preventDefault","List","map","post","i","Archive","Array","from","showArchive","setShowArchive","s","Footer"],"sources":["/Users/sandeep/Downloads/github_repos/react-projs/the-atomic-blog/src/App.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport { faker } from \"@faker-js/faker\";\n\nfunction createRandomPost() {\n  return {\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\n    body: faker.hacker.phrase(),\n  };\n}\n\nfunction App() {\n  // Whenever `isFakeDark` changes, we toggle the `fake-dark-mode` class on the HTML element (see in \"Elements\" dev tool).\n  useEffect(\n    function () {\n      document.documentElement.classList.toggle(\"fake-dark-mode\");\n    },\n    [isFakeDark]\n  );\n\n  return (\n    <PostContext.Provider\n      // Step2: Assigning Values to be passed\n      value={{\n        posts: searchedPosts,\n        onClearPosts: handleClearPosts,\n        onAddPost: handleAddPost,\n        searchQuery,\n        setSearchQuery,\n      }}\n    >\n      <section>\n        <button\n          onClick={() => setIsFakeDark((isFakeDark) => !isFakeDark)}\n          className=\"btn-fake-dark-mode\"\n        >\n          {isFakeDark ? \"☀️\" : \"🌙\"}\n        </button>\n\n        <Header />\n        <Main />\n        <Archive />\n        <Footer />\n      </section>\n    </PostContext.Provider>\n  );\n}\n\nfunction Header() {\n  // STEP3: CONSUMING CONTEXT VALUE\n  const { onClearPosts } = useContext(PostContext);\n\n  return (\n    <header>\n      <h1>\n        <span>⚛️</span>The Atomic Blog\n      </h1>\n      <div>\n        <Results />\n        <SearchPosts />\n        <button onClick={onClearPosts}>Clear posts</button>\n      </div>\n    </header>\n  );\n}\n\nfunction SearchPosts() {\n  const { searchQuery, setSearchQuery } = useContext(PostContext);\n\n  return (\n    <input\n      value={searchQuery}\n      onChange={(e) => setSearchQuery(e.target.value)}\n      placeholder=\"Search posts...\"\n    />\n  );\n}\n\nfunction Results() {\n  const { posts } = useContext(PostContext);\n  return <p>🚀 {posts.length} atomic posts found</p>;\n}\n\nfunction Main() {\n  return (\n    <main>\n      <FormAddPost />\n      <Posts />\n    </main>\n  );\n}\n\nfunction Posts() {\n  return (\n    <section>\n      <List />\n    </section>\n  );\n}\n\nfunction FormAddPost() {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n\n  const handleSubmit = function (e) {\n    e.preventDefault();\n    if (!body || !title) return;\n    onAddPost({ title, body });\n    setTitle(\"\");\n    setBody(\"\");\n  };\n\n  const { onAddPost } = useContext(PostContext);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        placeholder=\"Post title\"\n      />\n      <textarea\n        value={body}\n        onChange={(e) => setBody(e.target.value)}\n        placeholder=\"Post body\"\n      />\n      <button>Add post</button>\n    </form>\n  );\n}\n\nfunction List() {\n  const { posts } = useContext(PostContext);\n  return (\n    <ul>\n      {posts.map((post, i) => (\n        <li key={i}>\n          <h3>{post.title}</h3>\n          <p>{post.body}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Archive() {\n  // Here we don't need the setter function. We're only using state to store these posts because the callback function passed into useState (which generates the posts) is only called once, on the initial render. So we use this trick as an optimization technique, because if we just used a regular variable, these posts would be re-created on every render. We could also move the posts outside the components, but I wanted to show you this trick 😉\n  const [posts] = useState(() =>\n    // 💥 WARNING: This might make your computer slow! Try a smaller `length` first\n    Array.from({ length: 10000 }, () => createRandomPost())\n  );\n\n  const [showArchive, setShowArchive] = useState(false);\n\n  const { onAddPost } = useContext(PostContext);\n\n  return (\n    <aside>\n      <h2>Post archive</h2>\n      <button onClick={() => setShowArchive((s) => !s)}>\n        {showArchive ? \"Hide archive posts\" : \"Show archive posts\"}\n      </button>\n\n      {showArchive && (\n        <ul>\n          {posts.map((post, i) => (\n            <li key={i}>\n              <p>\n                <strong>{post.title}:</strong> {post.body}\n              </p>\n              <button onClick={() => onAddPost(post)}>Add as new post</button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </aside>\n  );\n}\n\nfunction Footer() {\n  return <footer>&copy; by The Atomic Blog ✌️</footer>;\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}