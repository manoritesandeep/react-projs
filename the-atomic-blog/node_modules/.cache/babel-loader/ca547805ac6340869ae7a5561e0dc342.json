{"ast":null,"code":"var _jsxFileName = \"/Users/sandeep/Downloads/github_repos/react-projs/the-atomic-blog/src/PostContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { faker } from \"@faker-js/faker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createRandomPost() {\n  return {\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\n    body: faker.hacker.phrase()\n  };\n} // STEP 1:\n\n\nconst PostContext = /*#__PURE__*/createContext();\n\nfunction PostProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [posts, setPosts] = useState(() => Array.from({\n    length: 30\n  }, () => createRandomPost()));\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Derived state. These are the posts that will actually be displayed\n\n  const searchedPosts = searchQuery.length > 0 ? posts.filter(post => `${post.title} ${post.body}`.toLowerCase().includes(searchQuery.toLowerCase())) : posts;\n\n  function handleAddPost(post) {\n    setPosts(posts => [post, ...posts]);\n  }\n\n  function handleClearPosts() {\n    setPosts([]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    // Step2: Assigning Values to be passed\n    value: {\n      posts: searchedPosts,\n      onClearPosts: handleClearPosts,\n      onAddPost: handleAddPost,\n      searchQuery,\n      setSearchQuery\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n} // Define custom hook\n\n\n_s(PostProvider, \"VXdyzwc12x+7JxoZ0bFmmpPp0GI=\");\n\n_c = PostProvider;\n\nfunction usePosts() {\n  _s2();\n\n  const context = useContext(PostContext);\n  if (context === undefined) throw new Error(\"PostContext was used outside of the PostProvider\");\n  return context;\n}\n\n_s2(usePosts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { PostProvider, usePosts };\n\nvar _c;\n\n$RefreshReg$(_c, \"PostProvider\");","map":{"version":3,"names":["createContext","useContext","useState","faker","createRandomPost","title","hacker","adjective","noun","body","phrase","PostContext","PostProvider","children","posts","setPosts","Array","from","length","searchQuery","setSearchQuery","searchedPosts","filter","post","toLowerCase","includes","handleAddPost","handleClearPosts","onClearPosts","onAddPost","usePosts","context","undefined","Error"],"sources":["/Users/sandeep/Downloads/github_repos/react-projs/the-atomic-blog/src/PostContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport { faker } from \"@faker-js/faker\";\n\nfunction createRandomPost() {\n  return {\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\n    body: faker.hacker.phrase(),\n  };\n}\n\n// STEP 1:\nconst PostContext = createContext();\n\nfunction PostProvider({ children }) {\n  const [posts, setPosts] = useState(() =>\n    Array.from({ length: 30 }, () => createRandomPost())\n  );\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Derived state. These are the posts that will actually be displayed\n  const searchedPosts =\n    searchQuery.length > 0\n      ? posts.filter((post) =>\n          `${post.title} ${post.body}`\n            .toLowerCase()\n            .includes(searchQuery.toLowerCase())\n        )\n      : posts;\n\n  function handleAddPost(post) {\n    setPosts((posts) => [post, ...posts]);\n  }\n\n  function handleClearPosts() {\n    setPosts([]);\n  }\n\n  return (\n    <PostContext.Provider\n      // Step2: Assigning Values to be passed\n      value={{\n        posts: searchedPosts,\n        onClearPosts: handleClearPosts,\n        onAddPost: handleAddPost,\n        searchQuery,\n        setSearchQuery,\n      }}\n    >\n      {children}\n    </PostContext.Provider>\n  );\n}\n\n// Define custom hook\nfunction usePosts() {\n  const context = useContext(PostContext);\n  if (context === undefined)\n    throw new Error(\"PostContext was used outside of the PostProvider\");\n  return context;\n}\n\nexport { PostProvider, usePosts };\n"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,KAAT,QAAsB,iBAAtB;;;AAEA,SAASC,gBAAT,GAA4B;EAC1B,OAAO;IACLC,KAAK,EAAG,GAAEF,KAAK,CAACG,MAAN,CAAaC,SAAb,EAAyB,IAAGJ,KAAK,CAACG,MAAN,CAAaE,IAAb,EAAoB,EADrD;IAELC,IAAI,EAAEN,KAAK,CAACG,MAAN,CAAaI,MAAb;EAFD,CAAP;AAID,C,CAED;;;AACA,MAAMC,WAAW,gBAAGX,aAAa,EAAjC;;AAEA,SAASY,YAAT,OAAoC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAClC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,MACjCc,KAAK,CAACC,IAAN,CAAW;IAAEC,MAAM,EAAE;EAAV,CAAX,EAA2B,MAAMd,gBAAgB,EAAjD,CADgC,CAAlC;EAGA,MAAM,CAACe,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,EAAD,CAA9C,CAJkC,CAMlC;;EACA,MAAMmB,aAAa,GACjBF,WAAW,CAACD,MAAZ,GAAqB,CAArB,GACIJ,KAAK,CAACQ,MAAN,CAAcC,IAAD,IACV,GAAEA,IAAI,CAAClB,KAAM,IAAGkB,IAAI,CAACd,IAAK,EAA3B,CACGe,WADH,GAEGC,QAFH,CAEYN,WAAW,CAACK,WAAZ,EAFZ,CADF,CADJ,GAMIV,KAPN;;EASA,SAASY,aAAT,CAAuBH,IAAvB,EAA6B;IAC3BR,QAAQ,CAAED,KAAD,IAAW,CAACS,IAAD,EAAO,GAAGT,KAAV,CAAZ,CAAR;EACD;;EAED,SAASa,gBAAT,GAA4B;IAC1BZ,QAAQ,CAAC,EAAD,CAAR;EACD;;EAED,oBACE,QAAC,WAAD,CAAa,QAAb;IACE;IACA,KAAK,EAAE;MACLD,KAAK,EAAEO,aADF;MAELO,YAAY,EAAED,gBAFT;MAGLE,SAAS,EAAEH,aAHN;MAILP,WAJK;MAKLC;IALK,CAFT;IAAA,UAUGP;EAVH;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,C,CAED;;;GAxCSD,Y;;KAAAA,Y;;AAyCT,SAASkB,QAAT,GAAoB;EAAA;;EAClB,MAAMC,OAAO,GAAG9B,UAAU,CAACU,WAAD,CAA1B;EACA,IAAIoB,OAAO,KAAKC,SAAhB,EACE,MAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;EACF,OAAOF,OAAP;AACD;;IALQD,Q;;AAOT,SAASlB,YAAT,EAAuBkB,QAAvB"},"metadata":{},"sourceType":"module"}